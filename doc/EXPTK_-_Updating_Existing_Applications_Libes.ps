%!PS-Adobe%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 10 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Courier-Bold FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(1) 303.5 36 T
72 72 540 720 R
7 X
V
1 24 Q
0 X
(The NIST E) 170.31 704 T
1 18 Q
(XPRESS) 294.28 704 T
1 24 Q
( T) 363.25 704 T
(oolkit) 383.04 704 T
(\320) 300 674 T
(Updating Existing Applications) 145.38 644 T
1 14 Q
(Don Libes) 275.48 608.67 T
1 18 Q
(Abstract) 72 576 T
0 12 Q
1.09 (The NIST E) 72 555 P
0 9 Q
0.82 (XPRESS) 132.81 555 P
0 12 Q
1.09 ( toolkit is a software library for building E) 165.78 555 P
0 9 Q
0.82 (XPRESS) 377.73 555 P
0 12 Q
1.09 (-related tools.  The toolkit) 410.7 555 P
2.08 (was previously released in 1991, based on ISO TC184/SC4 N14 \050familiarly called \322E) 72 541 P
0 9 Q
1.56 (XPRESS) 507.03 541 P
0 12 Q
0.42 (N14\323\051.  The current release is based on Draft International Standard \050DIS\051 10303-1) 72 527 P
0.42 (1 \050N151\051 and) 475.22 527 P
0.32 (while the philosophical underpinnings are similar) 72 513 P
0.32 (, much of the interface has changed signi\336cant-) 310.62 513 P
-0.01 (ly) 72 499 P
-0.01 (.  This paper describes changes that must be made to existing applications so that they can work) 80.55 499 P
(with the new toolkit.) 72 485 T
0.12 (This paper should be read by anyone maintaining software based upon the NIST E) 72 466 P
0 9 Q
0.09 (XPRESS) 469.59 466 P
0 12 Q
0.12 ( toolkit.) 502.56 466 P
0.47 (This paper will also provide insight to people interested in the internals of E) 72 452 P
0 9 Q
0.35 (XPRESS) 442.93 452 P
0 12 Q
0.47 ( implementa-) 475.9 452 P
1.7 (tions and some of the ways they have changed over time due to experience and the dif) 72 438 P
1.7 (ferent) 512.03 438 P
(E) 72 424 T
0 9 Q
(XPRESS) 79.33 424 T
0 12 Q
( speci\336cations.) 112.29 424 T
(Keywords: compiler) 72 405 T
(, E) 169.78 405 T
0 9 Q
(XPRESS) 183.11 405 T
0 12 Q
(; implementation; National PDES T) 216.07 405 T
(estbed; PDES; STEP) 387.15 405 T
1 18 Q
(Context) 72 373 T
0 12 Q
0.01 (The PDES \050Product Data Exchange using STEP\051 activity is the United States\325 ef) 72 352 P
0.01 (fort in support of) 458.35 352 P
-0.16 (the Standard for the Exchange of Product Model Data \050STEP\051, an emer) 72 338 P
-0.16 (ging international standard) 411.74 338 P
0 (for the interchange of product data between various vendors\325 CAD/CAM systems and other man-) 72 324 P
0.91 (ufacturing-related software [1].  A National PDES T) 72 310 P
0.91 (estbed has been established at the National) 329.35 310 P
0.03 (Institute of Standards and T) 72 296 P
0.03 (echnology to provide testing and validation facilities for the emer) 204.52 296 P
0.03 (ging) 518.67 296 P
3.03 (standard.  The T) 72 282 P
3.03 (estbed is funded by the Computer) 158.85 282 P
3.03 (-aided Acquisition and Logistic Support) 335.33 282 P
(\050CALS\051 program of the Of) 72 268 T
(\336ce of the Secretary of Defense.) 200.35 268 T
0.63 (As part of the testing ef) 72 249 P
0.63 (fort, NIST is char) 187.84 249 P
0.63 (ged with providing a software toolkit for manipulating) 274.11 249 P
0.29 (STEP data.  The NIST E) 72 235 P
0 9 Q
0.22 (XPRESS) 192.02 235 P
0 12 Q
0.29 ( T) 224.99 235 P
0.29 (oolkit is a part of this.  The toolkit is an evolving, research-ori-) 234.76 235 P
-0.02 (ented set of software tools.  This document is one of a set of reports \050an overview of each appears) 72 221 P
(in [2]\051 which describe various aspects of the T) 72 207 T
(oolkit.) 293.65 207 T
1 18 Q
(Intr) 72 175 T
(oduction) 102.65 175 T
0 12 Q
1.53 (The bad news is: Much has changed.  Y) 72 154 P
1.53 (ou will not be able to recompile applications without) 274.57 154 P
(changing them.) 72 140 T
0.7 (The good news is: The system is faster) 72 121 P
0.7 (.  Much faster) 262.47 121 P
0.7 (.  And the library conforms to the E) 330.53 121 P
0 9 Q
0.53 (XPRESS) 507.03 121 P
0 12 Q
(DIS, and implements everything needed to do full resolution of all features of E) 72 107 T
0 9 Q
(XPRESS) 455.07 107 T
0 12 Q
(.) 488.04 107 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(2) 303.5 36 T
72 72 540 720 R
7 X
V
0 12 Q
0 X
1.12 (This document describes how to change your code to work with the new toolkit.  Some of the) 72 712 P
0.21 (changes are not one-for) 72 698 P
0.21 (-one; in this case, do not expect a direct replacement.  Y) 185.27 698 P
0.21 (ou may be forced) 455.79 698 P
(to recode parts of an application.) 72 684 T
1.09 (While the intent of this document is to describe how to convert programs, we occasionally de-) 72 665 P
(scribe other features, especially if they provide additional important bene\336t in some way) 72 651 T
(.) 495.92 651 T
1 18 Q
(Draft International Standard) 72 619 T
0 12 Q
-0.24 (As this report is being written, the E) 72 598 P
0 9 Q
-0.18 (XPRESS) 244.18 598 P
0 12 Q
-0.24 ( speci\336cation is now a Draft International Standard [7].) 277.15 598 P
0.25 (It has changed signi\336cantly from earlier drafts.  Correspondingly) 72 584 P
0.25 (, the toolkit has changed.  There) 384.64 584 P
0.45 (is no support for anything not mentioned in the current E) 72 570 P
0 9 Q
0.33 (XPRESS) 349.62 570 P
0 12 Q
0.45 ( DIS.  In particular) 382.59 570 P
0.45 (, schema \336les) 474.15 570 P
0.86 (must conform to the DIS.  No attempt is made to process schemas based on any other E) 72 556 P
0 9 Q
0.65 (XPRESS) 507.03 556 P
0 12 Q
(speci\336cation.) 72 542 T
1 18 Q
(Object-Oriented Engine) 72 510 T
0 12 Q
-0.17 (The previous version of the toolkit provided an object-oriented view of the internals.  This view is) 72 489 P
-0.08 (almost entirely gone.  In particular) 72 475 P
-0.08 (, most of the) 237.02 475 P
2 11 Q
-0.17 (OBJ) 299.68 475 P
0 12 Q
-0.08 ( functions no longer exist.  A few such as) 319.46 475 P
2 11 Q
-0.17 (OB-) 520.22 475 P
(Jfree) 72 461 T
0 12 Q
( exist as empty macros only to ease the pain of converting to the new version.) 104.96 461 T
0.95 (Due to changes in the implementation, most of the functionality originally provided by the OO) 72 442 P
-0.24 (engine is relatively straightforward to obtain without it.  This section describes how to accomplish) 72 428 P
(this.) 72 414 T
1 14 Q
(External T) 72 384.67 T
(ypes) 135.88 384.67 T
0 12 Q
0.15 (Some types are now stored in the dictionary rather than in the object.  In particular) 72 365 P
0.15 (, when retriev-) 469.44 365 P
0.16 (ing an object from a dictionary by name, the type of the object is set in the global) 72 351 P
2 11 Q
0.34 (DICT_type) 467.53 351 P
0 12 Q
0.16 ( as) 526.86 351 P
-0.03 (a side-ef) 72 337 P
-0.03 (fect.  The following code demonstrates how entities and functions in a scope could be lo-) 112.71 337 P
(cated and processed:) 72 323 T
2 11 Q
(DictionaryEntry de;) 108 304.67 T
(Generic x;) 108 289.67 T
(DICTdo_init\050scope->symbol_table,&de\051;) 108 259.67 T
(while \0500 != \050x = DICTdo\050&de\051\051\051 {) 108 244.67 T
(switch\050DICT_type\051 {) 145 229.67 T
(case OBJ_ENTITY: /* do something specif) 145 214.67 T
(ic to entities */) 402.08 214.67 T
(ENTITYdo_something\050\050Entity\051x\051;) 180 199.67 T
(break;) 180 184.67 T
(case OBJ_FUNCTION: /* do something specif) 145 169.67 T
(ic to functions */) 415.26 169.67 T
(FUNCTIONdo_something\050\050Function\051x\051;) 180 154.67 T
(break;) 180 139.67 T
(}) 145 124.67 T
(}) 108 109.67 T
2.91 (DICTdo_type_init) 72 94 P
0 12 Q
1.32 (, a variant of) 177.47 94 P
2 11 Q
2.91 (DICTdo_init) 246.38 94 P
0 12 Q
1.32 (, provides a shorthand when looking for one) 318.89 94 P
-0.19 (speci\336c type in a dictionary) 72 80 P
-0.19 (.  For example, the following code prints all the names of the schemas:) 203.04 80 P
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(3) 303.5 36 T
72 72 540 720 R
7 X
V
2 11 Q
0 X
(DictionaryEntry de;) 108 712.67 T
(Schema s;) 108 697.67 T
(DICTdo_type_init\050scope->symbol_table,&de,OBJ_SCHEMA\051;) 108 667.67 T
(while \0500 != \050s = \050Schema\051DICTdo\050&de\051\051\051) 108 652.67 T
(printf\050\322%s\134n\323,SCHEMAget_name\050s\051\051;) 145 637.67 T
1 14 Q
(Internal T) 72 608.67 T
(ypes) 132.77 608.67 T
0 12 Q
0.45 (Once an object type is known, further typing information \050i.e., subclasses\051 can be determined by) 72 589 P
0.33 (referencing the) 72 575 P
2 11 Q
0.73 (type) 147.92 575 P
0 12 Q
0.33 ( element of the current structure.  In most cases, the type value will act as a) 174.29 575 P
0.09 (tag for an associated union, typically called \322) 72 561 P
2 11 Q
0.21 (u) 289.16 561 P
0 12 Q
0.09 (\323.  This union contains the type-dependent data for) 295.76 561 P
(each structure.) 72 547 T
(For example, given a statement, it could be processed as follows:) 72 528 T
2 11 Q
(switch \050statement->type\051 {) 108 509.67 T
(case STMT_ALIAS:) 108 494.67 T
(ALIASdo_something\050statement->u.alias\051;) 145 479.67 T
(break;) 145 464.67 T
(case STMT_LOOP:) 108 449.67 T
(LOOPdo_something\050statement->u.loop\051;) 145 434.67 T
(break;) 145 419.67 T
(case . . .) 108 404.67 T
(}) 108 389.67 T
1 14 Q
(T) 72 360.67 T
(emporary Conversion Aids) 80.05 360.67 T
0 12 Q
0.01 (As mentioned earlier) 72 341 P
0.01 (, some of the old OBJ functions still exist simply to ease the pain of convert-) 172.12 341 P
(ing.  Here are some notes on each:) 72 327 T
2 11 Q
(OBJequal) 108 308 T
0 12 Q
0.76 (Does a shallow comparison.  This is usually desirable now) 252 308 P
1.11 (that objects no longer point to structures containing object) 252 294 P
2.17 (information, but rather point to the structures of the true) 252 280 P
(data.) 252 266 T
2 11 Q
(OBJfree) 108 247 T
0 12 Q
-0.05 (Does nothing.  Since most toolkit functions no longer create) 252 247 P
2.15 (copies, this is usually desirable.  In the special case that) 252 233 P
-0.27 (memory should really be freed, you must use the object-spe-) 252 219 P
(ci\336c free function.) 252 205 T
2 11 Q
(OBJref) 108 186 T
0 12 Q
0.48 (Does nothing.  Reference counting is no longer appropriate) 252 186 P
(on a system-wide basis.) 252 172 T
2 11 Q
(OBJget_data) 108 153 T
0 12 Q
0.03 (Returns original object unchanged.  This function originally) 252 153 P
3.87 (stripped the) 252 139 P
2 11 Q
8.51 (Object) 319.04 139 P
0 12 Q
3.87 ( wrapper of) 358.59 139 P
3.87 (f of an object.  Since) 421.39 139 P
2 11 Q
4.33 (struct) 252 125 P
0 12 Q
1.97 (s are no longer wrapped in) 291.55 125 P
2 11 Q
4.33 (Object) 433.92 125 P
0 12 Q
1.97 (s, there is no) 473.47 125 P
(need to do anything.) 252 111 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(4) 303.5 36 T
72 72 540 720 R
7 X
V
0 12 Q
0 X
0.87 (All other functions should be replaced with their object-speci\336c counterparts.  For example, in-) 72 712 P
(stead of) 72 698 T
2 11 Q
(OBJcreate\050Class_Linked_List,&errc\051;) 108 679.67 T
0 12 Q
(use) 72 664 T
2 11 Q
(LISTcreate\050\051) 108 645.67 T
1 14 Q
(Symbol) 72 616.67 T
0 12 Q
0.06 (In the previous release, some objects were derived from) 72 597 P
2 11 Q
0.14 (Symbol) 343.7 597 P
0 12 Q
0.06 (.  The most obvious use of) 383.25 597 P
2 11 Q
0.14 (Sym-) 513.63 597 P
5.26 (bol) 72 583 P
0 12 Q
2.39 ( was to provide objects with a name.  This could be retrieved with) 91.78 583 P
2 11 Q
5.26 (SYMBOLget_name) 444.72 583 P
0 12 Q
2.39 (.) 537 583 P
2 11 Q
-0.22 (Symbol) 72 569 P
0 12 Q
-0.1 (s have died along with the OO engine.  Thus, there is no way to apply) 111.55 569 P
2 11 Q
-0.22 (SYMBOLget_name) 447.71 569 P
0 12 Q
(to arbitrary objects.) 72 555 T
-0.1 (T) 72 536 P
-0.1 (o retrieve the name of an object, call the) 78.49 536 P
2 11 Q
-0.22 (XXXget_name) 273.42 536 P
0 12 Q
-0.1 ( where) 345.93 536 P
2 11 Q
-0.22 (XXX) 381.03 536 P
0 12 Q
-0.1 ( is the type name.  For exam-) 400.8 536 P
(ple, the name of a) 72 522 T
2 11 Q
(Schema) 160.6 522 T
0 12 Q
( is:) 200.15 522 T
2 11 Q
(SCHEMAget_name\050schema\051) 108 503.67 T
1 18 Q
(Scopes) 72 472 T
0 12 Q
(A variety of changes have been made to the scope mechanisms.) 72 451 T
0.04 (The scope resolution functions are completely dif) 72 432 P
0.04 (ferent in order to match the change from single-) 309.86 432 P
0.69 (pass resolution to multiple-pass resolution.  The description of these is beyond the scope of this) 72 418 P
(paper) 72 404 T
(.  Interested readers are referred to the Programmer) 97.98 404 T
(\325) 343.86 404 T
(s Reference [5].) 347.19 404 T
1 14 Q
(SCOPEget_XXX) 72 374.67 T
0 12 Q
(The following functions all retrieved a subset of information from a scope:) 72 355 T
2 11 Q
(SCOPEget_types) 108 336.67 T
(SCOPEget_variables) 108 321.67 T
(SCOPEget_algorithms) 108 306.67 T
(SCOPEget_constants) 108 291.67 T
0 12 Q
0.27 (In virtually all cases, these functions should be rewritten as an explicit scope traversal.  Most ex-) 72 276 P
0.81 (isting usage of such functions are immediately followed by a list traversal anyway) 72 262 P
0.81 (.  Combining) 475.39 262 P
(these removes the overhead of creating, traversing, and destroying a list.) 72 248 T
(For example, a typical use of SCOPEget_types might have been written this way:) 72 229 T
2 11 Q
(Linked_List list = SCOPEget_types\050scope\051;) 145 210.67 T
(LISTdo\050list,s,Symbol\051) 145 195.67 T
(printf\050\322%s\134n\323, TYPEget_name\050s\051\051;) 180 180.67 T
(LISTod) 145 165.67 T
(OBJfree\050list\051;) 145 150.67 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(5) 303.5 36 T
72 72 540 720 R
7 X
V
0 12 Q
0 X
(This should be rewritten as:) 72 712 T
2 11 Q
(DictionaryEntry de;) 108 693.67 T
(Type t;) 108 678.67 T
(DICTdo_type_init\050scope->symbol_table,&de,OBJ_TYPE\051;) 108 648.67 T
(while \0500 != \050t = \050Type\051DICTdo\050&de\051\051\051) 108 633.67 T
(printf\050\322%s\134n\323,TYPEget_name\050t\051\051;) 145 618.67 T
0 12 Q
0.89 (The scope lookup functions have also been radically revised.  Unfortunately) 72 584 P
0.89 (, there is no simple) 445.5 584 P
(one-to-one substitution that can be suggested for these.  Here are the new functions:) 72 570 T
2 11 Q
(VARfind) 108 551 T
0 12 Q
2.43 (Find an attribute \050or variable or constant\051 reference in a) 252 551 P
(scope.) 252 537 T
2 11 Q
(SCOPEfind) 108 518 T
0 12 Q
0.48 (Find an object that is not inherited by the super/subtype hi-) 252 518 P
(erarchy) 252 504 T
(.) 287.18 504 T
2 11 Q
(SCOPEfind_for_rename) 108 485 T
0 12 Q
(Find the true object referenced from another schema.) 252 485 T
2 11 Q
(EXPRESSfind_schema) 108 466 T
0 12 Q
0.59 (Find the named schema.  This may cause new schema \336les) 252 466 P
(to be read and parsed.) 252 452 T
1.8 (For ef) 72 433 P
1.8 (\336ciency) 102.56 433 P
1.8 (, some of the scope functions also take an ar) 139.75 433 P
1.8 (gument de\336ning what object types) 367.57 433 P
-0.01 (should be skipped while searching.  This ar) 72 419 P
-0.01 (gument is a bit representation of the object types.  It is) 279.59 419 P
0.58 (not the same thing as the types used by the dictionary \050see External T) 72 405 P
0.58 (ypes on page 2\051 which are) 411.52 405 P
(enum-like in nature) 72 391 T
0 10 Q
(1) 165.93 395.8 T
0 12 Q
(.) 170.93 391 T
(For example, this provides a way of determining the type, given the \050legal\051 attribute declaration:) 72 372 T
2 11 Q
(A1: A1;) 108 353.67 T
0 12 Q
0.41 (It is not suf) 72 338 P
0.41 (\336cient to merely start searching at a superscope since types can be de\336ned within the) 127.3 338 P
0.31 (current scopes.  The important thing is to ignore attributes.  An example piece of code might use) 72 324 P
2 11 Q
2.3 (OBJ_TYPE_BITS|OBJ_ENTITY_BITS) 72 310 P
0 12 Q
1.05 ( to \336nd either a type or an entity) 263.16 310 P
1.05 (.  T) 424.66 310 P
1.05 (o \336nd anything, use) 442.24 310 P
2 11 Q
-0.37 (TYPE_ANYTHING_BITS) 72 296 P
0 12 Q
-0.17 (.  A complete discussion of this can be found in the reference manual [5].) 190.65 296 P
(Implicit loop controls and) 72 277 T
2 11 Q
(ALIAS) 199.26 277 T
0 12 Q
( are handled by associating with them a scope of one element.) 232.22 277 T
0.26 (The remaining discussion about scopes is provided for completeness but is probably not of inter-) 72 258 P
(est to most readers.) 72 244 T
(The scope structure used to look like this:) 72 225 T
2 11 Q
(struct Scope {) 108 206.67 T
(Linked_List) 145 191.67 T
(parents;) 253 191.67 T
(Dictionary) 145 176.67 T
(symbol_table;) 253 176.67 T
(Dictionary) 145 161.67 T
(references;) 253 161.67 T
(Linked_List) 145 146.67 T
(use;) 253 146.67 T
(int) 145 131.67 T
(last_search;) 253 131.67 T
72 108 540 122.98 C
72 108 540 122.98 R
7 X
0 K
V
81 120.96 225 120.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 612 792 C
0 10 Q
0 X
0 K
-0.11 (1. The OBJ_XXX types are macro definitions rather than enumeration values.  They are used in enum-like ways,) 90 101.33 P
0.85 (however defining these as a single enumeration type would prevent the addition of other types by application) 90 89.33 P
(programmers.) 90 77.33 T
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(6) 303.5 36 T
72 72 540 720 R
7 X
V
2 11 Q
0 X
(Boolean) 145 712.67 T
(resolved;) 253 712.67 T
(};) 108 697.67 T
0 12 Q
(Now it looks like this:) 72 682 T
2 11 Q
(struct Scope {) 108 663.67 T
(        Symbol symbol;) 108 648.67 T
(        char type;) 108 633.67 T
(        int search_id;) 108 618.67 T
(        Dictionary symbol_table;) 108 603.67 T
(        struct Scope *superscope;) 108 588.67 T
(        union {) 108 573.67 T
(                struct Procedure *proc;) 108 558.67 T
(                struct Function *func;) 108 543.67 T
(                struct Rule *rule;) 108 528.67 T
(                struct Entity *entity;) 108 513.67 T
(                struct Schema *schema;) 108 498.67 T
(                struct Express *express;) 108 483.67 T
(                struct Increment *incr;) 108 468.67 T
(        } u;) 108 453.67 T
(};) 108 438.67 T
0 12 Q
0.83 (The) 72 423 P
2 11 Q
1.82 (type) 94.47 423 P
0 12 Q
0.83 ( and) 120.84 423 P
2 11 Q
1.82 (u) 145.81 423 P
0 12 Q
0.83 ( elements are described elsewhere \050see Internal T) 152.4 423 P
0.83 (ypes on page 3\051.  The symbol) 393.47 423 P
1.32 (originally inherited by the OO system is now declared explicitly) 72 409 P
1.32 (.) 391.21 409 P
2 11 Q
2.9 (search_id) 402.85 409 P
0 12 Q
1.32 ( is just) 462.17 409 P
2 11 Q
2.9 (last_-) 500.45 409 P
2.34 (search) 72 395 P
0 12 Q
1.07 ( renamed.) 111.55 395 P
2 11 Q
2.34 (superscope) 168.03 395 P
0 12 Q
1.07 ( contains the information that was otherwise found in parents.) 233.95 395 P
2 11 Q
2.6 (resolved) 72 381 P
0 12 Q
1.18 ( is now contained within) 124.73 381 P
2 11 Q
2.6 (symbol) 251.57 381 P
0 12 Q
1.18 (.  Use and Reference are described elsewhere \050see) 291.12 381 P
(Use/Reference Changes on page 6\051.) 72 367 T
0.14 (Note that two nominal scopes do not appear in) 72 348 P
2 11 Q
0.3 (u) 299.43 348 P
0 12 Q
0.14 (:) 306.02 348 P
2 11 Q
0.3 (query) 312.49 348 P
0 12 Q
0.14 ( and \050enumeration\051) 345.45 348 P
2 11 Q
0.3 (type) 440.12 348 P
0 12 Q
0.14 (.  Both of these) 466.49 348 P
0.69 (need to be members of \050or put another way \322inherit behavior from\323\051 other structures.  In an ob-) 72 334 P
-0.19 (ject-oriented system, this would be called multiple inheritance.  In our non-OO system, we simply) 72 320 P
(pick one structure and simulate the rest with some extra code.) 72 306 T
1 18 Q
(Use/Refer) 72 274 T
(ence Changes) 147.59 274 T
0 12 Q
-0.28 (In the previous release, Used and Referenced objects were actually copied from one schema to an-) 72 253 P
1.05 (other) 72 239 P
1.05 (.  Nonetheless, there were Use/Reference elements in the) 95.99 239 P
2 11 Q
2.32 (Scope) 381.58 239 P
0 12 Q
1.05 ( structure which could be) 414.54 239 P
(used to determine whether objects were non-local.) 72 225 T
-0.14 (The new release keeps a clean separation between local and non-local objects.  Separate functions) 72 206 P
0.84 (are available to \336nd objects in the local scope versus objects in the remote scope.  For instance) 72 192 P
2 11 Q
2.68 (SCOPEget_entities_supertype_order) 72 178 P
0 12 Q
1.22 ( now no longer returns Used entities.  Instead, use) 289.53 178 P
2 11 Q
1.24 (SCHEMAget_entities_use) 72 164 P
0 12 Q
0.56 ( to get Used entities and) 217.02 164 P
2 11 Q
1.24 (SCHEMAget_entities_ref) 338.99 164 P
0 12 Q
0.56 ( to get Ref-) 484.01 164 P
(erenced entities.) 72 150 T
-0.21 (No functions exist for certain obvious queries \050such as \322what schema is the owner of this object\323\051.) 72 131 P
0.34 (If more than a few such queries will be made by an application, it is cheaper to traverse the Use/) 72 117 P
-0.29 (Reference data structures once rather than having the toolkit do it multiple times, once for each re-) 72 103 P
(quest.  See the reference manual for more information on this.) 72 89 T
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(7) 303.5 36 T
72 72 540 720 R
7 X
V
1 18 Q
0 X
(Expr) 72 708 T
(essions) 110.66 708 T
0 12 Q
0.85 (Except for expression types \050see T) 72 687 P
0.85 (ypes on page 7\051, most of the functions having to do with ex-) 240.96 687 P
1.34 (pressions from the previous release should work in the new release.  However) 72 673 P
1.34 (, the underlying) 461.69 673 P
0.81 (implementation is completely dif) 72 659 P
0.81 (ferent.  The following explanation is only provided in case the) 233.12 659 P
0.17 (provided functions are insuf) 72 645 P
0.17 (\336cient.  The reader is referred to the reference manual for more com-) 207.21 645 P
(plete information.) 72 631 T
0.63 (In the previous release,) 72 612 P
2 11 Q
1.38 (Expression) 188.74 612 P
0 12 Q
0.63 (s relied heavily on the OO inheritance.  In the current sys-) 254.66 612 P
(tem,) 72 598 T
2 11 Q
(Expression) 95.99 598 T
0 12 Q
(s are quite explicit.  The new de\336nition of an) 161.9 598 T
2 11 Q
(Expression) 380.09 598 T
0 12 Q
( is:) 446.01 598 T
2 11 Q
(struct Expression {) 108 579.67 T
(Symbol symbol;) 145 564.67 T
(Type type;) 145 549.67 T
(Type return_type;) 145 534.67 T
(struct Op_Subexpression e;) 145 519.67 T
(union expr_union u;) 145 504.67 T
(};) 108 489.67 T
0.79 (type) 72 474 P
0 12 Q
0.36 ( is the syntactic type of the expression \050expression-with-operands, function-call, etc.\051 while) 98.37 474 P
2 11 Q
-0.08 (return_type) 72 460 P
0 12 Q
-0.04 ( is the semantic type of the value returned \050integer) 144.51 460 P
-0.04 (, real, set of real, etc.\051.  One of) 384.53 460 P
2 11 Q
-0.08 (e) 533.41 460 P
0 12 Q
0.18 (\050for operands\051 or) 72 446 P
2 11 Q
0.4 (u) 156.8 446 P
0 12 Q
0.18 ( \050for anything else\051  is used to hold type) 163.39 446 P
0 10 Q
0.15 (2) 355.9 450.8 P
0 12 Q
0.18 (-speci\336c data depending on the value) 360.89 446 P
(of) 72 432 T
2 11 Q
(type) 84.99 432 T
0 12 Q
( and) 111.36 432 T
2 11 Q
(return_type) 134.67 432 T
0 12 Q
(.) 207.18 432 T
1 18 Q
(Algorithms) 72 400 T
0 12 Q
-0.04 (Some of the algorithm access functions have been changed to be speci\336c to the type of algorithm.) 72 379 P
-0.24 (For example,) 72 365 P
2 11 Q
-0.53 (ALGget_parameters) 137.81 365 P
0 12 Q
-0.24 ( should be changed to) 249.87 365 P
2 11 Q
-0.53 (FUNCget_parameters) 356.26 365 P
0 12 Q
-0.24 (,) 474.92 365 P
2 11 Q
-0.53 (RULEget_-) 480.67 365 P
(parameters) 72 351 T
0 12 Q
(, or) 137.92 351 T
2 11 Q
(PROCget_parameters) 156.9 351 T
0 12 Q
(.) 275.56 351 T
1 18 Q
(T) 72 319 T
(ypes) 82.67 319 T
0 12 Q
-0.12 (Some of the functions having to do with) 72 298 P
2 11 Q
-0.25 (Type) 266.97 298 P
0 12 Q
-0.12 (s from the previous release will work in the new re-) 293.34 298 P
0.53 (lease.  However) 72 284 P
0.53 (, the underlying implementation is completely dif) 149.5 284 P
0.53 (ferent and some functions may) 389.99 284 P
0.22 (need some conversion.  The following sections describe the impact in more detail.  Unless other-) 72 270 P
(wise mentioned, functions from the previous release should still work.) 72 256 T
1 14 Q
(Object Functions) 72 226.67 T
0 12 Q
-0.18 (Much of the typing was implicitly handled by the OO engine.  This typing is now explicit.  In par-) 72 207 P
1.68 (ticular in the previous implementation) 72 193 P
2 11 Q
3.69 (OBJget_class) 266.61 193 P
0 12 Q
1.68 ( was used to get the \322class\323 of a type.) 345.71 193 P
-0.08 (There is now no global notion of class, although the concept still exists for types.  For this reason,) 72 179 P
1.07 (the old) 72 165 P
2 11 Q
2.36 (Class) 110.12 165 P
0 12 Q
1.07 ( references have been \336xed to continue to work but only on) 143.08 165 P
2 11 Q
2.36 (Type) 443.72 165 P
0 12 Q
1.07 (s.  Do not use) 470.09 165 P
(functions such as) 72 151 T
2 11 Q
(OBJget_class) 157.61 151 T
0 12 Q
( on anything but) 236.71 151 T
2 11 Q
(Type) 318 151 T
0 12 Q
(s.) 344.37 151 T
(For consistency with all other functions, a type\325) 72 132 T
(s \322class\323 is now called a type\325) 300.52 132 T
(s \322type\323.) 443.75 132 T
72 84 540 98.98 C
72 84 540 98.98 R
7 X
0 K
V
81 96.96 225 96.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 612 792 C
0 10 Q
0 X
0 K
(2. syntactic) 90 77.33 T
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(8) 303.5 36 T
72 72 540 720 R
7 X
V
1 14 Q
0 X
(Enumerations) 72 710.67 T
0 12 Q
0.65 (Each enumeration type and item is represented by an) 72 691 P
2 11 Q
1.42 (Expression) 334.62 691 P
0 12 Q
0.65 ( which contains a scope \050see) 400.54 691 P
0.97 (Scopes on page 4\051.  This is done in order to support dif) 72 677 P
0.97 (ferent enumerations with common item) 346.91 677 P
1.56 (names.  Thus, the function) 72 663 P
2 11 Q
3.42 (ENUM_TYPEget_items) 210.03 663 P
0 12 Q
1.56 ( now returns a dictionary instead of a list.) 328.68 663 P
(Each element is an expression of type) 72 649 T
2 11 Q
(enumeration) 256.2 649 T
0 12 Q
( instead of a symbol.) 328.7 649 T
-0.16 (Enumeration items are not only entered into the scope of the enumeration type de\336nition, but they) 72 630 P
0.1 (are also entered into the immediately outer scope since that is where their primary visibility is re-) 72 616 P
-0.09 (quired.  In this higher scope, it is possible to \336nd) 72 602 P
3 F
-0.09 (ambiguous enumerations) 307.93 602 P
0 F
-0.09 (.  These are overloaded) 428.78 602 P
0.62 (enumeration items.  Finding one normally indicates that the enumeration item name needs to be) 72 588 P
(quali\336ed with the enumeration type name.) 72 574 T
1 18 Q
(Libmisc and Other Dir) 72 542 T
(ectory Rearrangements) 248.09 542 T
0 12 Q
0.77 (The) 72 521 P
2 11 Q
1.69 (libmisc) 94.42 521 P
0 12 Q
0.77 ( library has been bundled in with the E) 140.56 521 P
0 9 Q
0.58 (XPRESS) 332.59 521 P
0 12 Q
0.77 ( library) 365.55 521 P
0.77 (, so this reference can be re-) 400.52 521 P
0.34 (moved from Make\336les.  While) 72 507 P
2 11 Q
0.75 (libmisc) 224.28 507 P
0 12 Q
0.34 ( was originally seen as a separate toolkit, it was heavily) 270.42 507 P
-0.22 (customized only for use with the E) 72 493 P
0 9 Q
-0.16 (XPRESS) 237.92 493 P
0 12 Q
-0.22 ( toolkit in this version.  Because of this, there seemed no) 270.89 493 P
0.44 (point in keeping the include \336les separate.  Thus, the E) 72 479 P
0 9 Q
0.33 (XPRESS) 339.58 479 P
0 12 Q
0.44 ( and) 372.55 479 P
2 11 Q
0.97 (libmisc) 396.75 479 P
0.97 (include) 446.33 479 P
0 12 Q
0.44 ( \336les now) 492.47 479 P
(live in the E) 72 465 T
0 9 Q
(XPRESS) 130.3 465 T
0 12 Q
( source directory) 163.27 465 T
(.) 243.08 465 T
(A description of speci\336c changes follows:) 72 446 T
1 F
(OBJ Functions) 72 418 T
0 F
0.78 (The object engine is gone [see Object-Oriented Engine on page 2].  Some new object functions) 72 399 P
(exist, but these provide new functionality and are probably not of help in converting old code.) 72 385 T
1 F
(DICT Functions) 72 357 T
0 F
1.5 (The dictionary is slightly dif) 72 338 P
1.5 (ferent.  In particular) 214.37 338 P
1.5 (, the dictionary not only explicitly knows the) 314.3 338 P
-0.2 (name of an object, but it knows the type and the line number and \336le in which the object was orig-) 72 324 P
0.12 (inally found.  This is necessary to make up for the missing OO engine as well as to produce error) 72 310 P
(messages that understand multi\336le E) 72 296 T
0 9 Q
(XPRESS) 247.9 296 T
0 12 Q
( models.) 280.86 296 T
1 F
(STRING Functions) 72 268 T
0 F
0.5 (The) 72 249 P
2 11 Q
1.1 (String) 94.15 249 P
0 12 Q
0.5 ( abstraction support routines have been removed.  The abstraction allowed dif) 133.7 249 P
0.5 (ferent) 512.03 249 P
0.85 (underlying representations for strings, but was incomplete to the point that users had to assume) 72 235 P
0.87 (that the usual C representation was used.  It was pointless to complete the abstraction since the) 72 221 P
-0.04 (Standard C library is now very rich in string support.  Use the Standard C library string functions.) 72 207 P
0.99 (The typedef) 72 188 P
2 11 Q
2.18 (String) 134.6 188 P
0 12 Q
0.99 ( and the function) 174.15 188 P
2 11 Q
2.18 (STRINGequal) 262.05 188 P
0 12 Q
0.99 ( continue to exist but are deprecated.  All) 334.56 188 P
(other references to the string abstraction no longer exist.) 72 174 T
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(9) 303.5 36 T
72 72 540 720 R
7 X
V
1 18 Q
0 X
(Main) 72 708 T
1 14 Q
(Default) 72 676.67 T
0 12 Q
0.73 (The previous version of the toolkit provided a default main procedure that had a strong view of) 72 657 P
0.98 (how applications should look and feel.  For instance, applications were expected to produce an) 72 643 P
(output \336le.  For this reason, applications were expected to name their entry point as:) 72 629 T
2 11 Q
(void print_f) 108 610.67 T
(ile\050Schema,FILE *\051;) 187.1 610.67 T
0 12 Q
0.56 (The new toolkit provides a main, but it is signi\336cantly more con\336gurable.  A number of options) 72 595 P
2.23 (may be controlled by setting variables inside the user) 72 581 P
2.23 (-de\336ned function) 344.79 581 P
2 11 Q
4.91 (EXPRESSinit_init) 434.53 581 P
0 12 Q
1.04 (which is called immediately at program start-up.  T) 72 567 P
1.04 (o simulate the earlier interface, the variable) 325.62 567 P
2 11 Q
0.28 (EXPRESSbackend) 72 553 P
0 12 Q
0.13 ( is set to the application entry) 164.29 553 P
0.13 (.  This function must return) 305.51 553 P
2 11 Q
0.28 (void) 440.52 553 P
0 12 Q
0.13 ( and take a sin-) 466.89 553 P
(gle ar) 72 539 T
(gument of) 98.76 539 T
2 11 Q
(Express) 150.73 539 T
0 12 Q
(.  For example:) 196.87 539 T
2 11 Q
(#include \322express.h\323) 108 520.67 T
(#include \322resolve.h\323) 108 505.67 T
(void print_f) 108 475.67 T
(ile\050Express\051;) 187.1 475.67 T
(void) 108 445.67 T
(EXPRESSinit_init\050\051 {) 108 430.67 T
(        EXPRESSbackend = print_f) 108 415.67 T
(ile;) 318.94 415.67 T
(}) 108 400.67 T
0.96 (EXPRESSinit_init) 72 370 P
0 12 Q
0.44 ( must be de\336ned by the user as a true function which matches the example) 177.47 370 P
(above.) 72 356 T
0.64 (The new) 72 337 P
2 11 Q
1.4 (main) 117.9 337 P
0 12 Q
0.64 ( is signi\336cantly more \337exible and can likely replace) 144.27 337 P
2 11 Q
1.4 (main) 400.85 337 P
0 12 Q
0.64 ( routines that had to be) 427.21 337 P
0.19 (handwritten in prior releases.  Y) 72 323 P
0.19 (ou can \336nd other \337exibility provided by the new) 226.27 323 P
2 11 Q
0.41 (main) 462.79 323 P
0 12 Q
0.19 ( in the ref-) 489.16 323 P
(erence manual.) 72 309 T
1 14 Q
(Dynamic Loading) 72 279.67 T
0 12 Q
0.07 (The) 72 260 P
2 11 Q
0.16 (express_dynamic) 93.72 260 P
0 12 Q
0.07 ( package is gone.  No one \050to my knowledge\051 used this.  The functional-) 192.6 260 P
(ity was not worth the increase in code space and the result was highly nonportable.) 72 246 T
-0.2 (The) 72 227 P
2 11 Q
-0.44 (express_static) 93.45 227 P
0 12 Q
-0.2 ( package is all that remains.  This was modi\336ed so that it is invisible to the) 185.73 227 P
(application.  All references to either of these options can be deleted.) 72 213 T
1 14 Q
(Passes) 72 183.67 T
0 12 Q
(All the references to) 72 164 T
2 11 Q
(pass1) 172.58 164 T
0 12 Q
( and) 205.54 164 T
2 11 Q
(pass2) 228.85 164 T
0 12 Q
( are gone.  The following have direct substitutions:) 261.81 164 T
89.99 143.69 72 143.69 2 L
V
0.59 H
0 Z
N
(Old) 72 145 T
310.64 143.69 288 143.69 2 L
V
N
(New) 288 145 T
2 11 Q
(void EXPRESSpass_2\050Express\051) 72 126.67 T
(void EXPRESSresolve\050Express\051) 288 126.67 T
(Express EXPRESScreate\050\051;) 288 108.67 T
(Express EXPRESSpass_1\050FILE *\051) 72 95.67 T
(void EXPRESSparse\050Express,FILE *,) 288 95.67 T
(                 char *f) 288 82.67 T
(ilename\051) 446.2 82.67 T
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(10) 301 36 T
72 72 540 720 R
7 X
V
0 12 Q
0 X
0.24 (Either of the 2nd or 3rd ar) 72 712 P
0.24 (guments to) 198.47 712 P
2 11 Q
0.53 (EXPRESSparse) 254.93 712 P
0 12 Q
0.24 ( may be null, but at least one must be non-) 334.03 712 P
(null.  The \336lename is preferred since this can be used to generate more descriptive messages.) 72 698 T
2 11 Q
1.12 (EXPRESSparse) 72 679 P
0 12 Q
0.51 ( must always be preceded by) 151.1 679 P
2 11 Q
1.12 (EXPRESScreate) 295.38 679 P
0 12 Q
0.51 (, although not necessarily imme-) 381.07 679 P
1.55 (diately) 72 665 P
1.55 (.  In particular) 103.87 665 P
1.55 (,) 175.99 665 P
2 11 Q
3.41 (EXPRESSparse) 183.54 665 P
0 12 Q
1.55 ( may be called multiple times on the result returned by) 262.64 665 P
2 11 Q
2.34 (EXPRESScreate) 72 651 P
0 12 Q
1.07 (.  \050This is useful when parsing new schemas that are being added to schemas) 157.69 651 P
(that have already been parsed.\051) 72 637 T
1 14 Q
(W) 72 607.67 T
(arning Options) 85.22 607.67 T
0 12 Q
(The interface to the warning system has been completely redesigned.  Code such as:) 72 588 T
2 11 Q
(warnings[ecnt].name = STRINGcopy\050\322subtypes\323\051;) 108 569.67 T
(warnings[ecnt++].error = ERROR_unknown_subtype;) 108 554.67 T
0 12 Q
(should be rewritten as:) 72 539 T
2 11 Q
(ERRORcreate_option\050\322subtypes\323,ERROR_unknown_subtype\051;) 108 520.67 T
0 12 Q
1.69 (Once an option is created, no parsing is necessary to determine which option to set or unset.) 72 505 P
(Rather) 72 491 T
(, the function) 103.5 491 T
2 11 Q
(ERRORset_option) 170.12 491 T
0 12 Q
( should be called with the option string as:) 268.99 491 T
2 11 Q
(ERRORset_option\050optarg,1\051;) 108 472.67 T
0 12 Q
0.64 (The 2nd ar) 72 457 P
0.64 (gument is a boolean describing whether the option should be set or unset.  It is espe-) 125.02 457 P
0.33 (cially convenient to use one \337ag character to set an option and another to unset it.  Then one can) 72 443 P
(say:) 72 429 T
2 11 Q
(case \324s\325: /* set */) 108 410.67 T
(case \324u\325: /* unset */) 108 395.67 T
(ERRORset_option\050optarg,optchar == \324s\325\051;) 145 380.67 T
0 12 Q
(See the reference manual for more information.) 72 365 T
1 18 Q
(Err) 72 333 T
(or Functions) 99.65 333 T
1 14 Q
(Sorting) 72 301.67 T
0 12 Q
-0.18 (By default, diagnostics are printed immediately rather than buf) 72 282 P
-0.18 (fering them up and sorting them by) 371.83 282 P
(line number) 72 268 T
(.  The underlying function to toggle this is de\336ned as follows:) 128.97 268 T
2 11 Q
(ERRORbuffer_messages\050boolean\051;) 108 249.67 T
0 12 Q
0.24 (While the buf) 72 234 P
0.24 (fering code has been speeded up \050it used to call two extra processes, now it doesn\325) 138.22 234 P
0.24 (t) 536.66 234 P
0.35 (call any\051, there is little point to sorting by line numbers.  The order in which diagnostics are pre-) 72 220 P
-0.06 (sented to the user are the order in which problems should be resolved.  I.e., a missing schema will) 72 206 P
(be now detected immediately and will cause many spurious errors rather than vice versa.) 72 192 T
1 14 Q
(ERRORr) 72 162.67 T
(eport_with_line) 128.49 162.67 T
2 11 Q
9.86 (ERRORreport_with_line) 72 143 P
0 12 Q
4.48 ( still exists, however users are encouraged to use) 210.43 143 P
2 11 Q
9.86 (ERRORre-) 487.27 143 P
1.17 (port_with_symbol) 72 129 P
0 12 Q
0.53 (.  Symbols now contains \336lenames describing the \336le in which the symbol) 177.47 129 P
1.32 (was encountered.  This makes for more helpful diagnostics.  If) 72 115 P
2 11 Q
2.89 (ERRORreport_with_line) 389.26 115 P
0 12 Q
1.32 ( is) 527.68 115 P
(used, the \336lename is heuristically derived.) 72 101 T
FMENDPAGE
%%EndPage: "10" 11
%%Page: "11" 11
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(11) 301 36 T
72 72 540 720 R
7 X
V
0 12 Q
0 X
0.25 (All diagnostics are formatted slightly dif) 72 712 P
0.25 (ferently than before.  This change was made speci\336cally) 267.9 712 P
-0.19 (to support the Emacs compile hook [1) 72 698 P
-0.19 (1] which manipulates the source and diagnostics in two sep-) 252.94 698 P
2.57 (arate windows.  Each time the) 72 684 P
2 11 Q
5.65 (next-error) 234.98 684 P
0 12 Q
2.57 ( function is invoked \050typically by the two key) 300.9 684 P
1.26 (sequence: control-X backquote\051, both windows are scrolled so that the next diagnostic and the) 72 670 P
(corresponding source line are displayed.) 72 656 T
1 18 Q
(How to Obtain the T) 72 624 T
(oolkit) 229.27 624 T
0 12 Q
1.27 (The toolkit and its documentation may be obtained in a variety of ways.  The simplest way is) 72 603 P
1.12 (through anonymous ftp via the Internet.  In this case, the source is /pub/step/npttools/exptk.tar) 72 589 P
1.12 (.) 537 589 P
2.09 (Complete documentation on obtaining the toolkit and its documentation is /pub/step/ntpdocs/) 72 575 P
(exptk-obtaining-installing.ps.Z [17].) 72 561 T
-0.14 (Alternately) 72 542 P
-0.14 (, it possible to receive the toolkit by email.  T) 125.18 542 P
-0.14 (o do this, send the following mail to ntps-) 340.86 542 P
(erver@cme.nist.gov:) 72 528 T
2 11 Q
(send step/npttools/exptk.tar.Z) 108 509.67 T
(send step/nptdocs/exptk-obtaining-installing.ps.Z) 108 494.67 T
0 12 Q
0.4 (If you do not understand these instructions or for any other reason cannot successfully use ftp or) 72 479 P
(email, contact:) 72 465 T
(F) 72 446 T
(ASD \320 National PDES T) 77.78 446 T
(estbed) 196.88 446 T
(National Institute of T) 72 432 T
(echnology and Standards) 178.09 432 T
(Bldg 220, Rm A-127) 72 418 T
(Gaithersbur) 72 404 T
(g, MD  20899) 128.4 404 T
(npt-info@cme.nist.gov) 72 385 T
(1-301-975-3508) 72 371 T
1 18 Q
(Questions, Pr) 72 339 T
(oblems, and Support) 175.62 339 T
0 12 Q
0.44 (While we are willing to listen to problems, requests for extension, etc., we cannot guarantee any) 72 318 P
0.73 (kind of response.  Since the system is distributed in source form, you are encouraged to experi-) 72 304 P
-0.14 (ment with the system, especially if you have problems with it.  While it is often quicker for you to) 72 290 P
1.02 (have us diagnose your problems, it is quicker for us to have you diagnose your own problems.) 72 276 P
(This software is a research prototype, intended to spur development of commercial products.) 72 262 T
7.19 (Nonetheless, if you do have questions and/or problems, you may send e-mail to) 72 243 P
0.4 (hotline@c) 72 229 P
0.4 (me.nist.gov) 121.69 229 P
0.4 (.  Please include schemas, version numbers, platform descriptions, and any) 176.88 229 P
(other information that could be relevant.) 72 215 T
1 18 Q
(Refer) 72 183 T
(ences) 114.62 183 T
0 12 Q
([1]) 72 162 T
1.48 (Mason, H., ed.,) 102.02 162 P
1.48 (\322Industrial Automation Systems \320 Product Data Representation and Ex-) 183.07 162 P
0.39 (change \320 Part 1: Overview and Fundamental Principles\323) 124.99 148 P
0.39 (, V) 397.85 148 P
0.39 (ersion 9, ISO TC184/SC4/) 411.56 148 P
(WG PMAG Document N50, December 1991.) 124.99 134 T
([2]) 72 115 T
0.68 (Libes, Don, \322The NIST E) 102.02 115 P
0 9 Q
0.51 (XPRESS) 227.98 115 P
0 12 Q
0.68 ( T) 260.94 115 P
0.68 (oolkit \320 Introduction and Overview\323, National Institute) 271.11 115 P
(of Standards and T) 124.99 101 T
(echnology) 215.09 101 T
(, Gaithersbur) 264.27 101 T
(g, MD, to appear) 326.67 101 T
(.) 407.62 101 T
FMENDPAGE
%%EndPage: "11" 12
%%Page: "12" 12
612 792 0 FMBEGINPAGE
72 746 540 756 R
7 X
0 K
V
72 32.67 540 42.67 R
V
0 10 Q
0 X
(12) 301 36 T
72 72 540 720 R
7 X
V
0 12 Q
0 X
([3]) 72 712 T
0.08 (Clark, Steve N., \322An Introduction to The NIST PDES T) 102.02 712 P
0.08 (oolkit\323, NISTIR 4336, National In-) 370.44 712 P
(stitute of Standards and T) 124.99 698 T
(echnology) 247.41 698 T
(, Gaithersbur) 296.59 698 T
(g, MD, May 1990.) 358.99 698 T
([4]) 72 679 T
-0.2 (Schenck, D., ed., \322Exchange of Product Model Data - Part1) 102.02 679 P
-0.2 (1: The E) 385.58 679 P
0 9 Q
-0.15 (XPRESS) 426.5 679 P
0 12 Q
-0.2 ( Language\323, ISO) 459.46 679 P
(TC184/SC4 Document N496, July 1990.) 124.99 665 T
([5]) 72 646 T
0.4 (Libes, Don, \322The NIST E) 102.02 646 P
0 9 Q
0.3 (XPRESS) 226.85 646 P
0 12 Q
0.4 ( T) 259.82 646 P
0.4 (oolkit \320 Programmer) 269.7 646 P
0.4 (\325) 370.88 646 P
0.4 (s Reference\323, National Institute of) 374.21 646 P
(Standards and T) 124.99 632 T
(echnology) 202.1 632 T
(, Gaithersbur) 251.28 632 T
(g, MD, to appear) 313.68 632 T
(.) 394.63 632 T
([6]) 72 613 T
0.4 (Clark, Steve N., \322QDES User) 102.02 613 P
0.4 (\325) 246.3 613 P
0.4 (s Guide\323, NISTIR 4361, National Institute of Standards and) 249.64 613 P
(T) 124.99 599 T
(echnology) 131.48 599 T
(, Gaithersbur) 180.66 599 T
(g, MD, June 1990.) 243.07 599 T
([7]) 72 580 T
0.6 (Morris, K.C., \322T) 102.02 580 P
0.6 (ranslating E) 182.76 580 P
0 9 Q
0.45 (XPRESS) 240.99 580 P
0 12 Q
0.6 ( to SQL: A User) 273.96 580 P
0.6 (\325) 355.43 580 P
0.6 (s Guide\323, NISTIR 4341, National In-) 358.77 580 P
(stitute of Standards and T) 124.99 566 T
(echnology) 247.41 566 T
(, Gaithersbur) 296.59 566 T
(g, MD, May 1990.) 358.99 566 T
([8]) 72 547 T
0.94 (Spiby) 102.02 547 P
0.94 (, P) 129.24 547 P
0.94 (., ed., \322ISO 10303 Industrial Automation Systems \320 Product Data Representation) 141.51 547 P
1.92 (and Exchange \320  Part 1) 124.99 533 P
1.92 (1: Description Methods: The E) 245.05 533 P
0 9 Q
1.44 (XPRESS) 401.3 533 P
0 12 Q
1.92 ( Language Reference) 434.27 533 P
(Manual\323, ISO DIS 10303-1) 124.99 519 T
(1:1992\050E\051, July 15, 1992.) 257.12 519 T
([9]) 72 500 T
1.88 (Morris, K.C., Sauder) 102.02 500 P
1.88 (, David, and Ressler) 205.91 500 P
1.88 (, Sandy) 308.01 500 P
1.88 (, \322V) 345.09 500 P
1.88 (alidation T) 365.62 500 P
1.88 (esting System: Reusable) 418.96 500 P
1.44 (Software Component Design\323, NISTIR 1992-X, National Institute of Standards and) 124.99 486 P
(T) 124.99 472 T
(echnology) 131.48 472 T
(, Gaithersbur) 180.66 472 T
(g, MD, September 1992.) 243.07 472 T
([10]) 72 453 T
-0.11 (Johnson, S.C., \322Y) 102.02 453 P
-0.11 (acc: Y) 186.56 453 P
-0.11 (et Another Compiler compiler\323,) 216.21 453 P
3 F
-0.11 (UNIX Pr) 371.99 453 P
-0.11 (ogrammer) 414.41 453 P
-0.11 (\325) 464.82 453 P
-0.11 (s Manual) 467.27 453 P
0 F
-0.11 (, Sev-) 512.13 453 P
(enth Edition, Bell Laboratories, Murray Hill, NJ, 1978.) 124.99 439 T
([1) 72 420 T
(1]) 81.55 420 T
1.54 (Schreiner) 102.02 420 P
1.54 (, Axel T) 147.5 420 P
1.54 (. and Friedman, Jr) 189.33 420 P
1.54 (., H. Geor) 280.23 420 P
1.54 (ge,) 330.72 420 P
3 F
1.54 (Intr) 349.58 420 P
1.54 (oduction to Compiler Construction) 367.13 420 P
(with UNIX) 124.99 406 T
0 F
(, New Y) 176.64 406 T
(ork, NY) 215.73 406 T
(, Prentice Hall, 1985.) 253.49 406 T
([12]) 72 387 T
1.01 (Stallman, Richard M., et al,) 102.02 387 P
3 F
1.01 (GNU\325) 242.67 387 P
1.01 (s Bulletin) 270.43 387 P
0 F
1.01 (, Free Software Foundation, Inc., Cambridge,) 317.09 387 P
(MA, June 1992.) 124.99 373 T
([13]) 72 354 T
1.66 (Lesk, M.E. and Schmidt, E., Lex: A Lexical Analyzer Generator) 102.02 354 P
1.66 (,) 425.96 354 P
3 F
1.66 (UNIX Pr) 438.29 354 P
1.66 (ogrammer) 482.48 354 P
1.66 (\325) 532.89 354 P
1.66 (s) 535.33 354 P
(Manual) 124.99 340 T
0 F
(, Seventh Edition, Bell Laboratories, Murray Hill, NJ, 1978.) 162.3 340 T
([14]) 72 321 T
0.71 (McLay) 102.02 321 P
0.71 (, Michael J. and Morris, K.C.,) 135.88 321 P
0.71 (\322The NIST STEP Class Library\323) 286.74 321 P
0.71 (,) 447.49 321 P
3 F
0.71 (C++ at W) 454.2 321 P
0.71 (ork-\32590) 504.03 321 P
(Confer) 124.99 307 T
(ence Pr) 157.87 307 T
(oceedings) 194.39 307 T
0 F
(, \050reprinted as  NISTIR 441) 242.35 307 T
(1,\051  September 1990.) 373.81 307 T
([15]) 72 288 T
1.36 (Morris, K.C., \322) 102.02 288 P
1.36 (Architecture for the Validation Testing System Software) 177.36 288 P
1.36 (\323, NISTIR 4742,) 457.33 288 P
(National Institute of Standards and T) 124.99 274 T
(echnology) 301.7 274 T
(, Gaithersbur) 350.89 274 T
(g, MD, January 1992) 413.29 274 T
([16]) 72 255 T
-0.29 (Libes, Don, and Clark, Steve N., \322The NIST E) 102.02 255 P
0 9 Q
-0.22 (XPRESS) 323.23 255 P
0 12 Q
-0.29 ( T) 356.2 255 P
-0.29 (oolkit \320 Lessons Learned\323,) 365.4 255 P
3 F
-0.29 (Pr) 496.49 255 P
-0.29 (oceed-) 508.04 255 P
0.03 (ings of the 1992 E) 124.99 241 P
3 9 Q
0.03 (XPRESS) 212.41 241 P
3 12 Q
0.03 ( Users\325 Gr) 243.37 241 P
0.03 (oup \050EUG \32492\051 Confer) 294.28 241 P
0.03 (ence) 402.86 241 P
0 F
0.03 (, Dallas, T) 424.83 241 P
0.03 (exas, October) 474.03 241 P
(17-18, 1992.) 124.99 227 T
([17]) 72 208 T
0.65 (Libes, Don, \322The NIST E) 102.02 208 P
0 9 Q
0.49 (XPRESS) 227.86 208 P
0 12 Q
0.65 ( T) 260.82 208 P
0.65 (oolkit \320 Obtaining and Installing\323, National Institute of) 270.96 208 P
(Standards and T) 124.99 194 T
(echnology) 202.1 194 T
(, Gaithersbur) 251.28 194 T
(g, MD, to appear) 313.68 194 T
(.) 394.63 194 T
FMENDPAGE
%%EndPage: "12" 13
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 12 1
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Courier-Bold
%%+ Times-Italic
